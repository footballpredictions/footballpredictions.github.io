// I18n
const I18N_DICTIONARY = {
	ru: {
		title: '–§—É—Ç–±–æ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã 2.0',
		download_app: '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
		version_prefix: '–í–µ—Ä—Å–∏—è',
		features: { predictions: '–ü—Ä–æ–≥–Ω–æ–∑—ã', statistics: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', h2h: '1 vs 2' },
		toast_preparing: '–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...',
		toast_start: '–ó–∞–≥—Ä—É–∑–∫–∞ APK –Ω–∞—á–Ω–µ—Ç—Å—è —Å–µ–π—á–∞—Å...'
	},
	en: {
		title: 'Football Predictions 2.0',
		download_app: 'Download App',
		version_prefix: 'Version',
		features: { predictions: 'Predictions', statistics: 'Statistics', h2h: 'Head-to-Head' },
		toast_preparing: 'Preparing download...',
		toast_start: 'APK download will start now...'
	}
};

function getSavedLang() {
	return localStorage.getItem('lang') || 'ru';
}

function setLang(langCode) {
	const next = langCode === 'ru' || langCode === 'en' ? langCode : 'ru';
	localStorage.setItem('lang', next);
	applyTranslations(next);
	updateLangToggle(next);
	const html = document.documentElement;
	if (html) html.setAttribute('lang', next);
}

function updateLangToggle(langCode) {
	const btn = document.querySelector('.lang-toggle');
	if (!btn) return;
	btn.textContent = langCode === 'ru' ? 'EN' : 'RU';
	btn.setAttribute('aria-label', langCode === 'ru' ? 'Switch language to English' : '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
}

function applyTranslations(langCode) {
	const dict = I18N_DICTIONARY[langCode] || I18N_DICTIONARY.ru;
	// Simple keys
	document.querySelectorAll('[data-i18n]').forEach((el) => {
		const key = el.getAttribute('data-i18n');
		if (!key) return;
		const parts = key.split('.');
		let value = dict;
		for (const part of parts) {
			value = value && value[part];
		}
		if (typeof value === 'string') {
			el.textContent = value;
		}
	});
	// Version label: keep number separate
	const prefixEl = document.querySelector('.version-prefix');
	if (prefixEl) prefixEl.textContent = dict.version_prefix;
}

function initLang() {
	const saved = getSavedLang();
	applyTranslations(saved);
	updateLangToggle(saved);
	const btn = document.querySelector('.lang-toggle');
	if (btn && !btn.__bound) {
		btn.addEventListener('click', () => {
			const current = getSavedLang();
			setLang(current === 'ru' ? 'en' : 'ru');
		});
		btn.__bound = true;
	}
	// Ensure html lang attribute
	const html = document.documentElement;
	if (html) html.setAttribute('lang', saved);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function downloadApp() {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
	const dict = I18N_DICTIONARY[getSavedLang()] || I18N_DICTIONARY.ru;
	showDownloadNotification(dict.toast_preparing);

	// –ï—Å–ª–∏ —É–∂–µ –∑–Ω–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ APK ‚Äî –∫–∞—á–∞–µ–º —Å—Ä–∞–∑—É
	if (window.__latestApkUrl) {
		triggerDirectDownload(window.__latestApkUrl);
		return;
	}

	// –ò–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É –∏–∑ GitHub Releases
	fetchLatestApkUrl()
		.then((apkUrl) => {
			if (apkUrl) {
				triggerDirectDownload(apkUrl);
			} else {
				// –§–æ–ª–±—ç–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
				triggerDirectDownload('https://github.com/footballpredictions/footballpredictions.github.io/releases/download/v2.0.2/FootballPredictions-release.apk');
			}
		})
		.catch(() => {
			triggerDirectDownload('https://github.com/footballpredictions/footballpredictions.github.io/releases/download/v2.0.2/FootballPredictions-release.apk');
		});
}

function triggerDirectDownload(url) {
    const dict = I18N_DICTIONARY[getSavedLang()] || I18N_DICTIONARY.ru;
    showDownloadNotification(dict.toast_start);
	const downloadBtn = document.querySelector('.download-btn');
	if (downloadBtn) {
		downloadBtn.style.transform = 'scale(0.95)';
		setTimeout(() => { downloadBtn.style.transform = ''; }, 150);
	}
	// –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∞–π–ª APK
	window.location.href = url;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ APK
async function fetchLatestApkUrl() {
	try {
		const res = await fetch('https://api.github.com/repos/footballpredictions/FootballAdminData/releases/latest', {
			headers: { 'Accept': 'application/vnd.github+json' }
		});
		if (!res.ok) throw new Error('Failed to fetch latest release');
		const data = await res.json();
		// –ò—â–µ–º asset c —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .apk
		const apkAsset = Array.isArray(data.assets) ? data.assets.find(a => typeof a.browser_download_url === 'string' && a.browser_download_url.toLowerCase().endsWith('.apk')) : null;
		if (apkAsset && apkAsset.browser_download_url) {
			window.__latestApkUrl = apkAsset.browser_download_url;
			window.__latestVersionTag = data.tag_name || '';
			updateVersionLabel(window.__latestVersionTag);
			return window.__latestApkUrl;
		}
		return null;
	} catch (e) {
		return null;
	}
}

function updateVersionLabel(tag) {
	if (!tag) return;
	const el = document.querySelector('.version-info');
	if (el) {
        const prefixEl = el.querySelector('.version-prefix');
        const numberEl = el.querySelector('.version-number');
        if (prefixEl && numberEl) {
            numberEl.textContent = tag;
        } else {
            el.textContent = `${tag}`;
        }
	}
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
function showDownloadNotification(text) {
	// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	const notification = document.createElement('div');
	notification.className = 'download-notification';
	notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-icon">üì±</span>
            <span class="notification-text">${text || '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–≥—Ä—É–∑–∫–∏...'}</span>
        </div>
    `;
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(45deg, #4CAF50, #45a049);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        animation: slideInRight 0.5s ease-out;
        font-family: 'Roboto', sans-serif;
    `;
	// –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
	document.body.appendChild(notification);
	// –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
	setTimeout(() => {
		notification.style.animation = 'slideOutRight 0.5s ease-in';
		setTimeout(() => {
			if (notification.parentNode) {
				notification.parentNode.removeChild(notification);
			}
		}, 500);
	}, 3000);
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// (–£–¥–∞–ª–µ–Ω—ã –ª–µ—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
function initPage() {
	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	fetchLatestApkUrl();
	// –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
	addSoundEffects();
	// Init language
	initLang();
	// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º—è—á–∞ (–ø–æ–¥ CSP –±–µ–∑ inline)
	const ballImg = document.querySelector('.ball-image');
	if (ballImg && !ballImg.__bound) {
		ballImg.addEventListener('error', () => {
			ballImg.style.display = 'none';
			const fallback = ballImg.nextElementSibling;
			if (fallback) fallback.style.display = 'block';
		});
		ballImg.__bound = true;
	}

	// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	const downloadBtn = document.querySelector('.download-btn');
	if (downloadBtn && !downloadBtn.__bound) {
		downloadBtn.addEventListener('click', downloadApp);
		downloadBtn.__bound = true;
	}

	// –õ—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏/–≤—Å—Ç–∞–≤–∫–µ —Å—Å—ã–ª–æ–∫
	setupClipboardGuards();
}

if (document.readyState === 'loading') {
	document.addEventListener('DOMContentLoaded', initPage);
} else {
	initPage();
}

// –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function addSoundEffects() {
	// –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
	let audioContext;
	let whistleAudio;
	let whistleStopTimer;
	let whistleFadeTimer;
	let whistleFadeInterval;
	function playWhistleSound() {
		if (!audioContext) {
			audioContext = new (window.AudioContext || window.webkitAudioContext)();
		}
		const ctx = audioContext;
		const now = ctx.currentTime;

		function scheduleTweet(startFreq, endFreq, startTime, duration) {
			// –î–≤–∞ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –¥–µ—Ç—é–Ω–æ–≤–∫–æ–π —Å–æ–∑–¥–∞—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —Å–≤–∏—Å—Ç
			const osc1 = ctx.createOscillator();
			const osc2 = ctx.createOscillator();
			osc1.type = 'triangle';
			osc2.type = 'triangle';
			osc1.frequency.setValueAtTime(startFreq, startTime);
			osc2.frequency.setValueAtTime(startFreq * 1.02, startTime);
			osc1.frequency.exponentialRampToValueAtTime(endFreq, startTime + duration);
			osc2.frequency.exponentialRampToValueAtTime(endFreq * 1.02, startTime + duration);

			// –õ—ë–≥–∫–∏–π –≤–∏–±—Ä–∞—Ç–æ
			const lfo = ctx.createOscillator();
			lfo.type = 'sine';
			lfo.frequency.setValueAtTime(8, startTime);
			const lfoDepth1 = ctx.createGain();
			const lfoDepth2 = ctx.createGain();
			lfoDepth1.gain.setValueAtTime(60, startTime);
			lfoDepth2.gain.setValueAtTime(60, startTime);
			lfo.connect(lfoDepth1);
			lfo.connect(lfoDepth2);
			lfoDepth1.connect(osc1.frequency);
			lfoDepth2.connect(osc2.frequency);

			// –£–∑–∫–æ–ø–æ–ª–æ—Å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –ø—Ä–∏–¥–∞—Ç—å ¬´—Å–≤–∏—Å—Ç–∫–æ–≤—ã–π¬ª —Ç–µ–º–±—Ä
			const bandpass = ctx.createBiquadFilter();
			bandpass.type = 'bandpass';
			bandpass.Q.setValueAtTime(18, startTime);
			bandpass.frequency.setValueAtTime((startFreq + endFreq) / 2, startTime);

			// –û–≥–∏–±–∞—é—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ‚Äî —Ä–µ–∑–∫–∞—è –∞—Ç–∞–∫–∞, –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∞–¥
			const gain = ctx.createGain();
			gain.gain.setValueAtTime(0.0001, startTime);
			gain.gain.exponentialRampToValueAtTime(0.6, startTime + 0.02);
			gain.gain.exponentialRampToValueAtTime(0.0001, startTime + duration);

			osc1.connect(bandpass);
			osc2.connect(bandpass);
			bandpass.connect(gain);
			gain.connect(ctx.destination);

			osc1.start(startTime);
			osc2.start(startTime);
			lfo.start(startTime);
			osc1.stop(startTime + duration + 0.02);
			osc2.stop(startTime + duration + 0.02);
			lfo.stop(startTime + duration + 0.02);
		}

		// –¢—Ä–∏ —Å–≤–∏—Å—Ç–∫–∞: –¥–ª–∏–Ω–Ω—ã–π ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –¥–ª–∏–Ω–Ω—ã–π
		const long1 = 0.28;
		const short = 0.14;
		const long2 = 0.32;
		const gap = 0.10;
		// –ü–µ—Ä–≤—ã–π (–¥–ª–∏–Ω–Ω—ã–π): –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–¥—ä—ë–º —á–∞—Å—Ç–æ—Ç—ã
		scheduleTweet(3000, 3600, now, long1);
		// –í—Ç–æ—Ä–æ–π (–∫–æ—Ä–æ—Ç–∫–∏–π): –±—ã—Å—Ç—Ä—ã–π —Å–ø–∞–¥
		scheduleTweet(3400, 3000, now + long1 + gap, short);
		// –¢—Ä–µ—Ç–∏–π (–¥–ª–∏–Ω–Ω—ã–π): –ø–æ–¥—ä—ë–º —Å —á—É—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –±–∞–∑–æ–π
		scheduleTweet(3200, 3800, now + long1 + gap + short + gap, long2);
	}
	// –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∑–≤—É–∫ (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç–æ–≤)
	try {
		whistleAudio = new Audio('sounds/applause_match.mp3');
		whistleAudio.preload = 'auto';
		whistleAudio.loop = false;
		whistleAudio.volume = 0.9;
		// –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —é–∑–µ—Ä-–∂–µ—Å—Ç—É
		whistleAudio.addEventListener('error', () => {
			whistleAudio = null; // –æ—Ç–∫–∞—Ç –∫ —Å–∏–Ω—Ç–µ–∑—É
		});
	} catch (_) {
		whistleAudio = null;
	}

	function playWhistle() {
		if (whistleAudio) {
			try {
				// –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç–æ–≤ 12 —Å–µ–∫ —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º –≤ –∫–æ–Ω—Ü–µ
				const PLAY_MS = 12000;
				const FADE_MS = 3000; // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è
				const TARGET_VOLUME = 0.9;

				if (whistleStopTimer) clearTimeout(whistleStopTimer);
				if (whistleFadeTimer) clearTimeout(whistleFadeTimer);
				if (whistleFadeInterval) clearInterval(whistleFadeInterval);

				try { whistleAudio.pause(); } catch (_) {}
				try { whistleAudio.currentTime = 0; } catch (_) {}
				whistleAudio.volume = TARGET_VOLUME;
				const playPromise = whistleAudio.play();

				// –°—Ç–∞—Ä—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è –∑–∞ FADE_MS –¥–æ –∫–æ–Ω—Ü–∞
				whistleFadeTimer = setTimeout(() => {
					const start = Date.now();
					const startVolume = whistleAudio.volume;
					whistleFadeInterval = setInterval(() => {
						const elapsed = Date.now() - start;
						const t = Math.min(1, elapsed / FADE_MS);
						const nextVol = startVolume * (1 - t);
						whistleAudio.volume = Math.max(0, nextVol);
						if (t >= 1) {
							clearInterval(whistleFadeInterval);
							whistleFadeInterval = null;
						}
					}, 60);
				}, Math.max(0, PLAY_MS - FADE_MS));

				// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ 12 —Å–µ–∫
				whistleStopTimer = setTimeout(() => {
					try { whistleAudio.pause(); } catch (_) {}
					try { whistleAudio.currentTime = 0; } catch (_) {}
					whistleAudio.volume = TARGET_VOLUME;
					if (whistleFadeTimer) { clearTimeout(whistleFadeTimer); whistleFadeTimer = null; }
					if (whistleFadeInterval) { clearInterval(whistleFadeInterval); whistleFadeInterval = null; }
				}, PLAY_MS);
				if (playPromise && typeof playPromise.catch === 'function') {
					playPromise.catch(() => playWhistleSound());
				}
			} catch (_) {
				playWhistleSound();
			}
		} else {
			playWhistleSound();
		}
	}

	const downloadBtn = document.querySelector('.download-btn');
	if (downloadBtn) downloadBtn.addEventListener('click', playWhistle);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
	console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', e.message);
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –º—è—á–µ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
document.addEventListener('contextmenu', function(e) {
	if (e.target.closest('.football-ball')) {
		e.preventDefault();
	}
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
document.addEventListener('keydown', function(e) {
	if (e.key === 'Enter' || e.key === ' ') {
		const downloadBtn = document.querySelector('.download-btn');
		if (document.activeElement === downloadBtn) {
			downloadApp();
		}
	}
});

// –ü–∞—Ä–∞–ª–ª–∞–∫—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
window.addEventListener('scroll', function() {
	const scrolled = window.pageYOffset;
	const parallax = document.querySelector('.splash-screen');
	const speed = scrolled * 0.5;
	if (parallax) {
		parallax.style.transform = `translateY(${speed}px)`;
	}
});

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–æ–∫ –∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö–æ—Ç–ª–∏–Ω–∫–∏–Ω–≥–∞
function setupClipboardGuards() {
	// –ë–ª–æ–∫–∏—Ä—É–µ–º drag-n-drop –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–Ω—É—Ç—Ä—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	document.addEventListener('dragover', (e) => e.preventDefault());
	document.addEventListener('drop', (e) => e.preventDefault());

	// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
	document.addEventListener('copy', (e) => {
		const selection = document.getSelection();
		if (selection && selection.toString().length > 0) {
			showTransientNotice('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫.');
		}
	});

	// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ URL
	document.addEventListener('paste', (e) => {
		const text = (e.clipboardData || window.clipboardData).getData('text');
		if (/https?:\/\//i.test(text)) {
			showTransientNotice('–í—Å—Ç–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–æ–π —Å–∞–π—Ç–∞.');
		}
	});
}

function showTransientNotice(message) {
	const notice = document.createElement('div');
	notice.textContent = message;
	notice.style.cssText = 'position: fixed; bottom: 16px; left: 50%; transform: translateX(-50%); background: rgba(0,0,0,.7); color: #fff; padding: 8px 12px; border-radius: 8px; z-index: 1100; font-size: 14px;';
	document.body.appendChild(notice);
	setTimeout(() => { notice.remove(); }, 2200);
}
